function doPost(e) {
  try {
    // üîç LOG : D√©but de la requ√™te (optimis√© pour la production)
    var startTime = new Date().getTime();
    Logger.log("=== D√âBUT DO POST ===");
    
    // ‚úÖ V√©rification rapide des param√®tres (optimis√©)
    if (!e?.postData?.contents) {
      return createErrorResponse("Donn√©es manquantes", "MISSING_DATA");
    }

    // ‚úÖ V√©rification de la taille des donn√©es (optimis√©)
    if (e.postData.contents.length > 10000) {
      return createErrorResponse("Donn√©es trop volumineuses", "DATA_TOO_LARGE");
    }

    // ‚úÖ Parsing JSON optimis√©
    var data;
    try {
      data = JSON.parse(e.postData.contents);
    } catch (parseError) {
      return createErrorResponse("Format JSON invalide", "INVALID_JSON");
    }

    // ‚úÖ Validation rapide des champs obligatoires
    if (!data.nom?.trim() || !data.prenom?.trim() || !data.contact1?.trim()) {
      return createErrorResponse("Champs obligatoires manquants", "VALIDATION_ERROR");
    }

    // ‚úÖ Validation optimis√©e du format t√©l√©phone
    var phonePattern = /^\+225[0-9]{10}$/;
    if (!phonePattern.test(data.contact1) || 
        (data.contact2 && data.contact2.trim() && !phonePattern.test(data.contact2))) {
      return createErrorResponse("Format t√©l√©phone invalide", "PHONE_VALIDATION_ERROR");
    }

    // ‚úÖ Acc√®s optimis√© √† la feuille (une seule fois)
    var sheet;
    try {
      sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    } catch (sheetError) {
      return createErrorResponse("Erreur d'acc√®s √† la feuille", "SHEET_ACCESS_ERROR");
    }

    // ‚úÖ Op√©rations optimis√©es en une seule fois
    var sheetInfo = getSheetInfoOptimized(sheet);
    
    // ‚úÖ V√©rification des en-t√™tes optimis√©e
    if (!sheetInfo.hasHeaders) {
      var headerResult = createHeadersOptimized(sheet);
      if (!headerResult.success) {
        return createErrorResponse("Erreur cr√©ation en-t√™tes", "HEADER_ERROR");
      }
    }

    // ‚úÖ V√©rification des doublons optimis√©e (seulement si n√©cessaire)
    if (sheetInfo.hasData) {
      var duplicateCheck = checkForDuplicatesOptimized(sheet, data, sheetInfo.lastRow);
      if (duplicateCheck.isDuplicate) {
        return createErrorResponse(duplicateCheck.message, "DUPLICATE_ENTRY");
      }
    }

    // ‚úÖ Enregistrement optimis√©
    var dateEnregistrement = new Date();
    var rowData = [
      sanitizeData(data.nom),
      sanitizeData(data.prenom),
      sanitizeData(data.contact1),
      sanitizeData(data.contact2 || ""),
      sanitizeData(data.jour_mois_naiss || ""),
      sanitizeData(data.famille_jeun || ""),
      sanitizeData(data.quartier || ""),
      sanitizeData(data.situ_mat || ""),
      sanitizeData(data.situ_spirit || ""),
      sanitizeData(data.departement || ""),
      sanitizeData(data.profession || ""),
      sanitizeData(data.secteur || ""),
      dateEnregistrement
    ];
    
    sheet.appendRow(rowData);
    
    // ‚úÖ Calcul du temps d'ex√©cution
    var executionTime = new Date().getTime() - startTime;
    Logger.log("Temps d'ex√©cution: " + executionTime + "ms");
    
    return ContentService.createTextOutput(JSON.stringify({
      status: "success",
      message: "Donn√©es enregistr√©es avec succ√®s",
      row: sheet.getLastRow(),
      timestamp: dateEnregistrement.toISOString(),
      executionTime: executionTime + "ms"
    })).setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    Logger.log("ERREUR CRITIQUE: " + error.message);
    return createErrorResponse("Erreur interne du serveur", "INTERNAL_ERROR");
  }
}

// ========================================
// FONCTIONS UTILITAIRES POUR LA GESTION D'ERREURS
// ========================================

/**
 * Cr√©e une r√©ponse d'erreur standardis√©e
 */
function createErrorResponse(message, errorCode) {
  Logger.log("Cr√©ation r√©ponse d'erreur: " + errorCode + " - " + message);
  return ContentService.createTextOutput(JSON.stringify({
    status: "error",
    message: message,
    errorCode: errorCode,
    timestamp: new Date().toISOString()
  })).setMimeType(ContentService.MimeType.JSON);
}

// ========================================
// FONCTIONS OPTIMIS√âES (remplacent les anciennes)
// ========================================

/**
 * Obtient les informations de la feuille de mani√®re optimis√©e (une seule lecture)
 */
function getSheetInfoOptimized(sheet) {
  try {
    var lastRow = sheet.getLastRow();
    var lastColumn = sheet.getLastColumn();
    
    return {
      lastRow: lastRow,
      lastColumn: lastColumn,
      hasHeaders: lastRow > 0 && lastColumn >= 13,
      hasData: lastRow > 1
    };
  } catch (error) {
    Logger.log("ERREUR getSheetInfo: " + error.message);
    return {
      lastRow: 0,
      lastColumn: 0,
      hasHeaders: false,
      hasData: false
    };
  }
}

/**
 * Cr√©e les en-t√™tes de mani√®re optimis√©e
 */
function createHeadersOptimized(sheet) {
  try {
    var headers = [
      "Nom", "Pr√©nom", "Contact 1", "Contact 2", "Jour/Mois Naissance", 
      "Famille/Jeunesse", "Quartier", "Situation Matrimoniale", 
      "Situation Spirituelle", "D√©partement", "Profession", "Secteur d'activit√©", 
      "Date d'enregistrement"
    ];
    
    sheet.appendRow(headers);
    return { success: true };
  } catch (error) {
    Logger.log("ERREUR cr√©ation en-t√™tes: " + error.message);
    return {
      success: false,
      message: "Erreur lors de la cr√©ation des en-t√™tes: " + error.message
    };
  }
}

/**
 * V√©rifie les doublons de mani√®re optimis√©e (lecture par lot)
 */
function checkForDuplicatesOptimized(sheet, data, lastRow) {
  try {
    if (lastRow <= 1) {
      return { isDuplicate: false };
    }
    
    // Lecture optimis√©e par lot (seulement les colonnes n√©cessaires)
    var dataRange = sheet.getRange(2, 1, lastRow - 1, 3);
    var existingData = dataRange.getValues();
    
    var nomLower = data.nom.toLowerCase().trim();
    var prenomLower = data.prenom.toLowerCase().trim();
    var contact1Trim = data.contact1.trim();
    
    for (var i = 0; i < existingData.length; i++) {
      var row = existingData[i];
      if (row[0] && row[1] && row[2]) {
        if (row[0].toString().toLowerCase().trim() === nomLower &&
            row[1].toString().toLowerCase().trim() === prenomLower &&
            row[2].toString().trim() === contact1Trim) {
          return {
            isDuplicate: true,
            message: "Un enregistrement avec ces informations existe d√©j√†"
          };
        }
      }
    }
    
    return { isDuplicate: false };
  } catch (error) {
    Logger.log("ERREUR v√©rification doublons: " + error.message);
    return { isDuplicate: false };
  }
}

/**
 * Nettoie et s√©curise les donn√©es d'entr√©e (optimis√©)
 */
function sanitizeData(input) {
  if (!input) return "";
  
  try {
    return input.toString()
      .trim()
      .replace(/[<>]/g, "")
      .substring(0, 255);
  } catch (error) {
    return "";
  }
}

/**
 * Fonction de test optimis√©e pour v√©rifier la connectivit√©
 */
function testConnection() {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    sheet.getLastRow(); // Test minimal d'acc√®s
    return true;
  } catch (error) {
    return false;
  }
}

// ========================================
// FONCTION GET AM√âLIOR√âE
// ========================================

// Fonction GET optimis√©e pour tester l'API
function doGet(e) {
  try {
    var startTime = new Date().getTime();
    
    // Test de connectivit√© optimis√©
    if (!testConnection()) {
      return createErrorResponse("Erreur de connexion", "CONNECTION_ERROR");
    }
    
    var executionTime = new Date().getTime() - startTime;
    
    var response = {
      status: "success",
      message: "API optimis√©e fonctionne correctement",
      timestamp: new Date().toISOString(),
      version: "3.0",
      performance: {
        optimized: true,
        executionTime: executionTime + "ms",
        features: [
          "Validation rapide",
          "D√©tection de doublons optimis√©e", 
          "Gestion d'erreurs performante",
          "Logs optimis√©s",
          "Appels API r√©duits"
        ]
      }
    };
    
    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return createErrorResponse("Erreur interne du serveur", "INTERNAL_ERROR");
  }
}